// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using vocabulary_service.Infrastructure.Persistence;

#nullable disable

namespace vocabulary_service.Migrations
{
    [DbContext(typeof(CardDbContext))]
    [Migration("20251023052442_InitDb")]
    partial class InitDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("vocabulary_service.Domains.Entities.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackMd")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DeckId")
                        .HasColumnType("uuid");

                    b.Property<string>("FrontMd")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HintMd")
                        .HasColumnType("text");

                    b.Property<int>("Idx")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeckId", "Idx")
                        .IsUnique();

                    b.ToTable("card", (string)null);
                });

            modelBuilder.Entity("vocabulary_service.Domains.Entities.Deck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionMd")
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.HasIndex("Status", "Category");

                    b.ToTable("deck", (string)null);
                });

            modelBuilder.Entity("vocabulary_service.Domains.Entities.ReviewLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<double>("EaseFactor")
                        .HasColumnType("double precision");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<int>("IntervalDays")
                        .HasColumnType("integer");

                    b.Property<int>("Repetition")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId", "CardId", "ReviewedAt");

                    b.ToTable("review_log", (string)null);
                });

            modelBuilder.Entity("vocabulary_service.Domains.Entities.UserCardReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("EaseFactor")
                        .HasColumnType("double precision");

                    b.Property<int>("IntervalDays")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Repetition")
                        .HasColumnType("integer");

                    b.Property<int>("TotalReviews")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("DueAt");

                    b.HasIndex("UserId", "CardId")
                        .IsUnique();

                    b.ToTable("user_card_review_state", (string)null);
                });

            modelBuilder.Entity("vocabulary_service.Domains.Entities.UserDeck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeckId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("SubscribeAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeckId", "Status");

                    b.HasIndex("UserId", "DeckId")
                        .IsUnique();

                    b.ToTable("user_deck", (string)null);
                });

            modelBuilder.Entity("vocabulary_service.Domains.Entities.Card", b =>
                {
                    b.HasOne("vocabulary_service.Domains.Entities.Deck", "Deck")
                        .WithMany("Cards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("vocabulary_service.Domains.Entities.ReviewLog", b =>
                {
                    b.HasOne("vocabulary_service.Domains.Entities.Card", "Card")
                        .WithMany("ReviewLogs")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("vocabulary_service.Domains.Entities.UserCardReview", b =>
                {
                    b.HasOne("vocabulary_service.Domains.Entities.Card", "Card")
                        .WithMany("UserCardReviews")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("vocabulary_service.Domains.Entities.UserDeck", b =>
                {
                    b.HasOne("vocabulary_service.Domains.Entities.Deck", "Deck")
                        .WithMany("UserDecks")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("vocabulary_service.Domains.Entities.Card", b =>
                {
                    b.Navigation("ReviewLogs");

                    b.Navigation("UserCardReviews");
                });

            modelBuilder.Entity("vocabulary_service.Domains.Entities.Deck", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("UserDecks");
                });
#pragma warning restore 612, 618
        }
    }
}
