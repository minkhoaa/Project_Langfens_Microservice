// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using attempt_service.Infrastructure.Persistence;

#nullable disable

namespace attempt_service.Migrations
{
    [DbContext(typeof(AttemptDbContext))]
    [Migration("20251012091314_initdb")]
    partial class initdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("attempt_service.Domain.Entities.Attempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DurationSec")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("GradedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<JsonDocument>("PaperJson")
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("RawScore")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal?>("ScaledScore")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExamId", "Status")
                        .HasDatabaseName("idx_attempt_exam_status");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("idx_attempt_user_status");

                    b.ToTable("attempts", (string)null);
                });

            modelBuilder.Entity("attempt_service.Domain.Entities.AttemptAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttemptId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AwardedPoints")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("SelectedOptionIds")
                        .HasColumnType("uuid[]");

                    b.Property<string>("TextAnswer")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttemptId", "QuestionId")
                        .IsUnique()
                        .HasDatabaseName("uq_attempt_answer_attempt_question");

                    b.ToTable("attempt_answer", (string)null);
                });

            modelBuilder.Entity("attempt_service.Domain.Entities.AttemptAnswer", b =>
                {
                    b.HasOne("attempt_service.Domain.Entities.Attempt", "Attempt")
                        .WithMany("Answers")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attempt");
                });

            modelBuilder.Entity("attempt_service.Domain.Entities.Attempt", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
